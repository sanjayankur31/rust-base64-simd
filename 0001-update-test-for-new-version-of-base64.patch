diff --git base64-simd/tests/it.rs base64-simd/tests/it.rs
index 5329283..247aad5 100644
--- base64-simd/tests/it.rs
+++ base64-simd/tests/it.rs
@@ -37,7 +37,7 @@ fn basic() {
         buf.clear();
         buf.resize(base64.encoded_length(input.len()), 0);
 
-        let ans = base64.encode_as_str(input.as_bytes(), buf.as_out());
+        let ans = base64.encode_as_str(input.as_bytes(), buf.as_out()).unwrap();
         assert_eq!(ans, output);
 
         buf.clear();
@@ -70,6 +70,8 @@ fn allocation() {
 #[cfg_attr(not(target_arch = "wasm32"), test)]
 #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test::wasm_bindgen_test)]
 fn random() {
+    use base64::Engine as _;
+
     dbgmsg!();
     for n in 0..128 {
         dbgmsg!("n = {}", n);
@@ -83,29 +85,26 @@ fn random() {
         ];
 
         let base_config = {
-            use base64::alphabet::*;
-            use base64::engine::fast_portable::{FastPortable, NO_PAD, PAD};
-
-            let f = FastPortable::from;
+            use base64::engine::general_purpose as gp;
 
             [
-                f(&STANDARD, PAD),
-                f(&URL_SAFE, PAD),
-                f(&STANDARD, NO_PAD),
-                f(&URL_SAFE, NO_PAD),
+                gp::STANDARD,        //
+                gp::URL_SAFE,        //
+                gp::STANDARD_NO_PAD, //
+                gp::URL_SAFE_NO_PAD, //
             ]
         };
 
         for (base64, config) in test_config.into_iter().zip(base_config.into_iter()) {
             dbgmsg!("base64 = {:?}", base64);
 
-            let encoded = base64::encode_engine(&bytes, &config);
+            let encoded = config.encode(&bytes);
             let encoded = encoded.as_bytes();
             assert!(base64.check(encoded).is_ok());
 
             {
                 let mut buf = vec![0u8; base64.encoded_length(n)];
-                let ans = base64.encode(&bytes, buf.as_out());
+                let ans = base64.encode(&bytes, buf.as_out()).unwrap();
                 assert_eq!(ans, encoded);
                 assert!(base64.check(ans).is_ok());
                 dbgmsg!("encoding ... ok");
